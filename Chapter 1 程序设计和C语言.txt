Chapter 1 程序设计和C语言

1.1 什么是计算机程序

1） 计算机的每一个操作是根据人们事先制定的指令进行的。为了使计算机执行一系列的操作，必须事先编好一条条指令，输入计算机。
2） 程序是一组计算机能识别和执行的指令。
    为了使计算机系统能实现各种功能，需要成千上万个程序；这些升序大多是由计算机软件设计人员根据需要设计好的，作为计算机的软件系统的一部分提供给用户使用。用户也可以根据自己的实际需求设计一些应用程序。
    计算机的本质是程序的机器，程序和指令是计算机系统中最基本的概念。

1.2 什么是计算机语言

    计算机语言是一种计算机和人都能识别的语言。
1） 机器语言：计算机基于二进制进行工作，只能识别由0和1组成的指令；在计算机发展初期，一般计算机的指令长度为16，即16个二进制数（0或1）组成的一条指令。
    接下来，人们用纸袋穿孔机以人工的方式在特制的黑色纸带上穿孔，在指定的位置上有孔代表1，无孔代表0。当需要执行此程序时，将此纸带装在光电输入机上，当光电输入机从纸带读入信息时，有孔处产生一个电脉冲，指令变成电信号，从而让计算机执行各种操作。
    这种计算机可直接识别和接受的二进制代码为 机器指令。机器指令的集合就是该计算机的机器语言。

2） 符号语言，eg：ADD A,B
    计算机无法直接识别和执行符号语言的指令，因此需要一种软件 汇编程序，把符号语言的指令转换为机器指令。这个转换的过程称为“代真”或“汇编”。因此，符号语言也称为 符号汇编语言 或 汇编语言。
    不同型号的计算机的机器语言和汇编语言是互不通用的，因此，机器语言和汇编语言是完全依赖于具体机器特性的，是面向机器的语言。由于其贴近计算机，因此称为 计算机低级语言。

3） 高级语言，eg：PRINT*,3.5*6*SIN(3.1415926/3)
    第一个计算机高级语言——FORTRAN语言（20世纪50年代），它接近于人们习惯使用的自然语言和数学语言（英语单词，数学式子），程序运行结果用英文和数字输出。
    这种语言功能很强，且不依赖于具体机器，用它写出的程序对任何机型的计算机都适用（或只需作很少的修改），称为 计算机高级语言。
    计算机无法直接识别高级语言程序，要进行“翻译”，使用名为 编译程序 的软件将高级语言写的程序（源程序）转换为机器指令的程序（目标程序）。一条高级语言的一个语句通常对应多条机器指令。

4） 近年来，全世界有2500种以上的高级语言。每种高级语言皆有其特定的用途。
    影响最大的：FORTRAN、ALGOL(适合数值计算)、BASIC、QBASIC（适合初学者的小型会话语言）、COBOL（适合商业管理）、Pascal（适合教学的结构程序设计语言）、PL/1（大型通用语言）、LISP、PROLOG（人工智能语言）、C（系统描述语言）、C++（支持面向对象程序设计的大型语言）、Visual Basic（支持面向对象程序设计的语言）、Java（适用于网络的语言）等。

5） 高级语言的发展阶段
    
    非结构化的语言：初期的语言；编程风格随意，只符合语法规则；程序中的流程可以随意跳转；早期的BASIC，FORTRAN和ALGOL都属于非结构化语言。
    
    结构化语言：“结构化程序设计方法”；规定程序必须由具有良好特性的基本结构（顺序结构、分支结构、循环结构）构成。程序中的流程不允许随意跳转，需从上到下的顺序执行各个基本结构。QBASIC, FORTRAN 77, C语言皆属于结构化的语言。

    非结构化语言和结构化语言都属于 基于过程 的语言，在编写程序时需要具体指定每一个过程的细节，适合编写规模较小的程序。
    人们提出了 面向对象 的程序设计方法来处理规模较大的程序，程序面对的不再是过程的细节，而是一个个对象，对象是由数据以及数据进行的操作组成的。

    面向对象的语言：处理规模较大的问题，C++, C#, Visual Basic和Java

    进行程序设计时，人们需根据任务的需要选择合适的语言。

1.3 C语言的发展及其特点（具体见书 page 4，没啥太重点的东西）

    C语言的祖先BCPL语言（Basic Combined Programming Language）由剑桥大学的Martin Richards于1967年推出。
    1970年，美国AT&T贝尔实验室的Ken Thompson以BCPL为基础，设计出简单且接近硬件的B语言，但其过于简单，且功能有限。
    1972年-1973年，贝尔实验室的D.M.Ritchie基于B语言设计出了C语言，保持了BCPL和B语言的精炼，接近硬件，又克服了前两者过于简单且无数据类型的缺点。开发C语言的目的时为了降低用C语言所写软件对硬件平台的依赖程度，使其具有可移植性。
    第一个C语言标准：1978年：The C Programming Language

    C语言的主要特点：
1） 语言简洁，紧凑，使用方便灵活。C语言只有37个关键词，9种控制语句，程序书写形式自由，主要以小写字母表示。
2） 运算符丰富，共34种运算符
3） 数据类型丰富
4） 具有结构化的控制语句（if...else，for等）以函数作为程序的模块单位，使 程序实现 模块化（一个一个模块进行程序实现）
5） 语法限制不太严格，程序设计自由度大
6） C语言允许直接访问物理地址，能进行位操作（bit）能实现汇编语言的大部分功能，可直接对硬件进行操作。
7） C语言编写的程序可移植性好
8） 生成目标代码质量高，程序执行效率高（编写系统软件。

1.4.2 C语言程序的结构

1） 一个程序由一个或多个源程序文件组成（project 和 file的关系
      一个源程序文件包含三个部分
1.1） 预处理指令：#include<stdio.h>，在C编译系统在对源程序进行翻译时，先由一个预处理器对预处理指令进行预处理（即把stdio.h头文件的内容读取出来，放在#include指令行）然后预处理得到的结果再与程序的其余部分一起，组成一个完整的，可用来编译的源程序，接着由编译程序对源程序正式进行编译，最后才得到目标程序。
1.2） 全局声明：指在函数之外进行的数据声明（例如将int a,b,sum放置main函数的前面），这样a,b,sum就是全局变量，在整个源积程序文件范围内有效（整个源程序文件都可以直接用这三个变量）
      另一种 在函数中声明的变量叫局部变量，只在函数范围内有效
1.3） 函数定义

2） 函数是C程序的主要组成部分：C语言的程序的几乎所有工作都由各个函数分别完成的，C程序的基本单位就是函数。编写C程序本质是编写一个个函数。
    一个C语言程序必须包含有且仅有一个main函数，main函数与其他函数组成一个源程序文件
    一个小程序中只有一个源程序文件，一个源程序文件由若干个函数（其中包含main函数
    若程序规模较大，则可以使一个程序包含若干个源程序文件，每个源程序文件包含若个函数（即将一个程序分成若干个程序模块（若干个源程序文件=若干个程序模块）
    编译是以源程序文件为对象进行编译，分别编译各个源程序文件得到对应的目标程序，再将所有目标程序连接成一个统一的可执行程序（目标可执行程序是二进制的）
    这可以实现程序的模块化
    被调用的函数：库函数（ANSI C提供一百多个），用户自行编写的；其他C编译系统除了库函数，还会提供其他专门的函数（如 Turbo C提供三百多个库函数

3） 一个函数包含两部分：函数首部和函数体
3.1） 函数首部包括 int[函数类型] max[函数名字]（int[函数参数类型] x[函数参数名],int[函数参数类型] y[函数参数名]） []中的内容解释函数所包含的部分，不属于函数部分

int main（void）
int main（）

都成立

3.2） 函数体：花括号内的部分
    声明部分：声明变量 & 对本函数所调用函数进行声明
    执行部分

4） 程序总是从main函数开始执行，无论main函数的位置在整个程序的哪个位置
5） C语言本身不提供输入输出语句，因为输入输出设计具体计算机的设备，C语言通过库函数scanf和printf来完成输入输出，这样的好处是可以在各种机器上实现，并且程序具有可移植性

1.5 运行C程序的步骤与方法（事实上例题和前面都已经介绍了

补充： 运行结果不正确的原因：语法错误和程序逻辑错误

    目前C编译系统都是集成环境（IDE），集中程序的编辑、编译、连接和运行



